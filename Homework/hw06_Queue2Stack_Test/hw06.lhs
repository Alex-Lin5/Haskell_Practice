--------------------------------------------------------------------------------

CIS 623 Structured programming and formal methods

Fall 2022

Homework 06 Part I 

Implement a queue using two stacks: A case study on property testing


> import Prelude 

> import Test.QuickCheck

Total points:  15 + 10 + 10 + 10 + 10 = 55 (Part I) 


-------------------------------------------------------------------------------


(10 point) Fill in the following information. You will lose 3 point for each 
missing or incorrect answer.

Name:

Email:

Number:

ie. The 3 digit number assigned to you

-------------------------------------------------------------------------------

Due date:

Release:        Nov 28, 2022 
Due date:       Dec 9, 2022, 11:59 pm

Remarks:

1. (5 point) You submission should be named as XXX-hw05.lhs where XXX is the 3 
digit no. assigned to you in blackboard.

You will lose 5 point if you do not following this naming convention. 

2. We do not accept any late submissions.
3. If you encounter any difficulties, and but you can upload your submission
   within an hour after the due date, please state the reason below:

State the reason(s) for late submission below (if needed):


4. If you cannot upload your submission within an hour after the due date
   because of a valid reason (eg. network/power outage etc.)  contact the
   grader at 

   ymfarhat@syr.edu 

   when email is available. Your grader will not grade your work but you may 
   receive an exemption.

--------------------------------------------------------------------------------
 
Note:

To answer the programming questions, add the haskell code according to the
requirement. DO NOT FORGET to add the > symbol below each line in your code.

-------------------------------------------------------------------------------
Part I: More on using QuickCheck
-------------------------------------------------------------------------------

It is conjectured that every non-negative integers which can be written 
in the form 

8r+7 (r >=0)

is not a sum of three squares.

In mathematics, Legendre's three-square theorem states that a natural number can be represented as the sum of three squares of integers
n=x^{2}+y^{2}+z^{2}
if and only if n is not of the form n = 4^a(8b + 7) for nonnegative integers a and b.
7, 15, 23, 28, 31, 39, 47, 55, 60, 63, 71

a. Write a function

eightBp7 :: Integer -> Bool

such that eightBp7 k returns true if k is a non-negative integer and 
it can be written in the form 

8r + 7 for some integer r.

*** Put your answer by filling in the blanks (Right hand side) below. *** 
*** For codes, DO NOT FORGET to add the > symbol ***

> eightBp7 :: Integer -> Bool
> eightBp7 k = ((mod (k-7) 8) == 0) && (k > -1)


--------------------------------------------------------------------------------

b.  (10 point)

Write a function 

isSumOfThreeSquares :: Integer -> Bool

which will take an non-negative integer as input, returns true if it can 
be expressed as the sum of three squares. Otherwise (including the case
when the input is negative) it will return false.

*** Put your answer by filling in the blanks (Right hand side) below. *** 
*** For codes, DO NOT FORGET to add the > symbol ***

> isSumOfThreeSquares :: Integer -> Bool
> isSumOfThreeSquares k = not (null [(x,y,z)|x<-[0..(bound k 0)], y<-[0..x], z<-[0..y], k == x*x+y*y+z*z])
> bound :: Integer -> Integer -> Integer
> bound k n
>     | k<0 = 0
>     | n*n <= k = bound k (n+1)
>     | otherwise = n-1


*Main> bound 4
*** Exception: Prelude.!!: negative index
--------------------------------------------------------------------------------

c.  (10 point)

    Let Prop be:

    Proposition: 

    Let k be a positive integer. If k can be written as the form

    8r + 7 (r >=0), then k is not a sum of three squares.

    Write a quickcheck property using explicit quantification (forall) to
    represent Prop. Show the verfication results generated by 
    quickCheck.


*** Put your answer by filling in the blanks (Right hand side) below. *** 
*** For codes, DO NOT FORGET to add the > symbol ***


> prop_threeSquares :: Integer -> Bool
> prop_threeSquares k
>     | k>=0 = (isSumOfThreeSquares k) == (not (eightBp7 k))
>     | otherwise = True


--------------------------------------------------------------------------------

d. (10 point) 

With respect to the results you obtained quickcheck:

-- If the test fails, state the case retrieved from quickcheck.
-- If the test give a positive result. Do quick check generate 100 test cases.
   If so, state the case (from quick check) where k is largest. If not, give 
   an explanation for the answers your obtained.  


*** Put your answer by filling in the blanks (Right hand side) below. *** 
*** For codes, DO NOT FORGET to add the > symbol ***

*Main> quickCheck prop_threeSquares 
*** Failed! Falsified (after 65 tests):
28

According to Legendre's three-square theorem, function eightBp7 does not cover all 
natural numbers that are not sum of three squares because it lacks a term of 4^a
where a is non-negative integers


--------------------------------------------------------------------------------


Part II: Implementation of the queue data type in another language (Total: 60 point)
Look up your group number from blackboard by checking
`Tools > My Grades`
link. Each group is now assigned to a specific set of programming languages (see the Table below). You will
be asked to use the assigned language(s) to complete the implementation of a queue data type. For example,
if you are in group 3, then you need to implement a queue data type using either C, C++ or C#. Students in
group 5 are free to pick any procedural language for their implementation.

Table 1: Preferred langauge of group members
Group Language
1 Java
2 Python marked
3 C/C++/C#
4 Javascript
5 Others

a. (30 point) Follow the ideas given in the file queue.lhs, implement a queue data type using two stacks.
Your implementation must include all the functions/operations (isEmpty, add, front, remove etc.) for
the queue datatype specified in the file queue.lhs.

queue represented by 2 stacks that 1 for adding element and another one for removing,
it requires flip operation every time add or remove element.

b. (Total: 30 point) Perform property tests
i. (15 point)
In the given implementation, the queue implemented satisfies the invariant condition at all times.
That is, starting with the empty queue q, it satisfies the invariant at all times, regardless of the
sequence of operations performed to q.
Show how you will test this property in your implementation. Label/Indicate clearly the portion
of your testing code as
  Property i
so that you TA/Grader will be able to check them. Please include sample test runs in your
submission.
ii. (15 point)
State another property of a queue that you will test in your implementation. Label/Indicate
clearly the portion of your testing code as
  Property ii
so that you TA/Grader will be able to check them. Please include sample test runs in your
submission.

--------------------------------------------------------------------------------



Part III: Implementation of the queue data type in another language (Total: 40 point)
For part III, please put your answer in a text file named XXX-hw06.txt, where XXX is your class student
number.

a. (20 point)
Discuss how you use the ideas given in queue.lhs file and the property testing examples you learned
in class in your implementation. For example, you may wish to describe how you apply the property
testing method learned in the functional programming framework (via quickCheck) to associate and/or
to convert from the given code queue.lhs to the code (procedural language) you implemented.

b. (20 point)
In class, we performed property testing (in the functional programming framework) to verify an
implementation of the queue data type. Describe and discuss how to adopt this approach of property
testing to other procedural programming tasks